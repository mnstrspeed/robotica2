#include "array.nxc"
#include "debug.nxc"

#define SONAR_MOTOR OUT_A
#define SONAR_BEGIN IN_2
#define SONAR_END IN_1
#define SONAR_SENSOR IN_4

#define SONAR_MOTOR_POWER 40
#define SONAR_STEP_INTERVAL 10
#define SONAR_MEASURE_INTERVAL 10
#define SONAR_SCAN_TIMEOUT 100

#define MOVEMENT_MOTOR_LEFT OUT_C
#define MOVEMENT_MOTOR_RIGHT OUT_B
#define MOVEMENT_MOTOR_TURN_POWER 40
#define MOVEMENT_MOTORS OUT_BC
#define MOVEMENT_MOTOR_POWER 100

#define VALUE_TRESHOLD 10
#define LENGTH_TRESHOLD 3

#define ANGLE_MIDDLE 90
#define MS_PER_DEGREE (500.0 / 45.0)

void sonar_init()
{
	SetSensorType(SONAR_BEGIN, SENSOR_TYPE_TOUCH);
	SetSensorMode(SONAR_BEGIN, SENSOR_MODE_BOOL);
	SetSensorType(SONAR_END, SENSOR_TYPE_TOUCH);
	SetSensorMode(SONAR_END, SENSOR_MODE_BOOL);
	SetSensorUltrasonic(SONAR_SENSOR);
	Off(SONAR_MOTOR);
	Off(MOVEMENT_MOTORS);
}

void turn_sonar(bool rev)
{
	if (rev)
	{
		OnRev(SONAR_MOTOR, SONAR_MOTOR_POWER);
	}
	else
	{
		OnFwd(SONAR_MOTOR, SONAR_MOTOR_POWER);
	}
}

void sonar_step(bool rev)
{
	turn_sonar(rev);
	Wait(SONAR_STEP_INTERVAL);
	Off(SONAR_MOTOR);
	Wait(SONAR_MEASURE_INTERVAL);
}

void sonar_scan(unsigned short &values[], unsigned short& num_values, bool rev)
{
	num_values = 0;
	byte turn_touch = rev ? SONAR_BEGIN : SONAR_END;

	/* turn_sonar(rev); */
	while (!SensorBoolean(turn_touch))
	{
		sonar_step(rev);
		values[num_values++] = SensorUS(SONAR_SENSOR);
		/* Wait(SONAR_MEASURE_INTERVAL); */
	}
	/* Off(SONAR_MOTOR); */

	if (rev)
	{
		reverse(values, num_values);
	}
}

// edge := [edges[i - 1], edges[i]) 
// begin inclusive, end exclusive
void find_edges(unsigned short &edges[], unsigned short& num_edges,
	unsigned short &values[], unsigned short num_values)
{
	num_edges = 0;
	edges[num_edges++] = 0;

	unsigned short i;
	for (i = 1; i < num_values; i++)
	{
		if (abs(values[i] - values[i - 1]) > VALUE_TRESHOLD)
		{
			if (i - edges[num_edges - 1] > LENGTH_TRESHOLD)
			{
				edges[num_edges++] = i;
			}
			else
			{
				num_edges--;
			}
		}
	}
	edges[num_edges++] = i;
}

void find_closest_object(unsigned short& begin, unsigned short& end,
	unsigned short &values[], unsigned short num_values,
	unsigned short &edges[], unsigned short num_edges)
{
	unsigned short i;
	short min_dist = -1;
	for (i = 1; i < num_edges; i++)
	{
		int dist = min(values, edges[i - 1], edges[i]);
		if (min_dist < 0 || min_dist > dist)
		{
			min_dist = dist;
			begin = edges[i - 1];
			end = edges[i];
		}
	}
}

void calibrate_sonar_fov(float& fov,
	float range, unsigned short num_measurements, // in real world
	float object_distance, float object_width, // in real world
	unsigned short object_begin, unsigned short object_end)
{
	float angle_interval = range / num_measurements;

	float detected_begin_angle = object_begin * angle_interval;
	float detected_end_angle = (object_end + 1) * angle_interval;
	float detected_alpha = detected_end_angle - detected_begin_angle;

	float actual_alpha = atan(object_width / 2 / object_distance);
	fov = detected_alpha - actual_alpha;
}

void compute_geometry(float& width, float& angle, float& begin_angle, float& end_angle,
	float detected_begin_angle, float detected_end_angle, float distance, float fov)
{
	begin_angle = detected_begin_angle + (fov / 2.0);
	end_angle = detected_end_angle - (fov / 2.0);

	float detected_angle = detected_end_angle - detected_begin_angle;
	angle = detected_angle - fov;
	width = tan(angle / 2.0 * PI / 180.0) * distance;
}

void turn_degrees(float object_angle)
{
	float angle = object_angle - ANGLE_MIDDLE;

	byte fwd_motor = angle < 0 ? MOVEMENT_MOTOR_RIGHT : MOVEMENT_MOTOR_LEFT;
	byte rev_motor = angle < 0 ? MOVEMENT_MOTOR_LEFT : MOVEMENT_MOTOR_RIGHT;

	OnFwd(fwd_motor, MOVEMENT_MOTOR_TURN_POWER);
	OnRev(rev_motor, MOVEMENT_MOTOR_TURN_POWER); 

	Wait(ange * MS_PER_DEGREE);

	Off(MOVEMENT_MOTORS);
}

void move_to_object(float angle, short distance)
{
	//stop moving if moving
	//rotate_robot(angle);
	//move again
}

void debug_values(unsigned short& values[], unsigned short num_values)
{
    string x = "[";

    unsigned short i;
    for (i = 0; i < num_values - 1; i++)
    {
        x += NumToStr(values[i]) + ",";
        if (i > 0 && i % 8 == 0)
        {
           debug_line(x);
           x = "";
        }
    }
    x += NumToStr(values[i]) + "]";
    
    debug_line(x);
}

task main()
{
	bool sonar_rev = false;

	while (1)
	{
		turn_degrees(180.0);
		turn_degrees(0.0);
		turn_degrees(0.0);
		turn_degrees(180.0);
		Wait(5000);
	}

/*
	sonar_init();
	while (1)
	{
		unsigned short num_values = 0;
		unsigned short values[128] = { 0 };
		sonar_scan(values, num_values, sonar_rev);

        //debug_values(values, num_values);
    
		debug_line("\n");

		debug_line(NumToStr(num_values) + " measurements");
		debug_line("min dist=" + NumToStr(min(values, 0, num_values - 1)));
		debug_line("max dist=" + NumToStr(max(values, 0, num_values - 1)));

		unsigned short num_edges = 0;
		unsigned short edges[16] = { 0 };
		find_edges(edges, num_edges, values, num_values);

		if (num_edges > 2)
		{
			debug_line("object(s) found (" + NumToStr(num_edges) + ")");

			unsigned short begin, end;
			find_closest_object(begin, end,
				values, num_values, edges, num_edges);

			float range = 180.0; // needs calibration
			float fov = 85.0; // needs calibration
			const float angle_interval = range / num_values;

			short distance = min(values, begin, end);

			float width, angle, begin_angle, end_angle;
			compute_geometry(width, angle, begin_angle, end_angle,
				begin * angle_interval, end * angle_interval, distance, fov);

			debug_line(
				NumToStr(begin_angle) + "-" +
				NumToStr(end_angle));
			debug_line("w=" +
				NumToStr(width) + " cm, d=" +
				NumToStr(distance) + " cm");

			move_to_object(angle, distance);
		}
		else
		{
			debug_line("no objects found");
		}
    
 		sonar_rev = !sonar_rev;
		Wait(SONAR_SCAN_TIMEOUT);
	}
	*/
}
